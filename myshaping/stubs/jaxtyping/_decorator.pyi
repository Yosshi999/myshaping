from ._config import config as config
from ._errors import AnnotationError as AnnotationError, TypeCheckError as TypeCheckError
from ._storage import pop_shape_memo as pop_shape_memo, push_shape_memo as push_shape_memo, shape_str as shape_str
from collections.abc import Callable
from contextlib import AbstractContextManager
from jaxtyping import AbstractArray as AbstractArray
from typing import Literal, overload

class _Sentinel: ...

@overload
def jaxtyped(*, typechecker=...) -> Callable[[_TypeOrCallable], _TypeOrCallable]: ...
@overload
def jaxtyped(fn: type[_T], *, typechecker=...) -> type[_T]: ...
@overload
def jaxtyped(fn: Callable[_Params, _Return], *, typechecker=...) -> Callable[_Params, _Return]: ...
@overload
def jaxtyped(fn: Literal['context']) -> AbstractContextManager[None]: ...

class _JaxtypingContext:
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...

class _jaxtyping_note_str(str): ...
