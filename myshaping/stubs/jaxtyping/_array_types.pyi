import enum
import re
from ._errors import AnnotationError as AnnotationError
from ._storage import get_shape_memo as get_shape_memo, get_treeflatten_memo as get_treeflatten_memo, get_treepath_memo as get_treepath_memo, set_shape_memo as set_shape_memo
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any, Literal, NoReturn, Union, TypeVar, Generic

def get_array_name_format(): ...
def set_array_name_format(value) -> None: ...

class _DimType(enum.Enum):
    named = ...
    fixed = ...
    symbolic = ...

_Name = TypeVar("_Name", bound=str)
_Broadcastable = TypeVar("_Broadcastable", bound=bool)
_Size = TypeVar("_Size", bound=int)

class _NamedDim(Generic[_Name, _Broadcastable]): ...
class _NamedVariadicDim(Generic[_Name, _Broadcastable]): ...
class _FixedDim(Generic[_Size, _Broadcastable]): ...
class _SymbolicDim(Generic[_Name, _Broadcastable]): ...
class _AnonymousDim: ...
class _AnonymousVariadicDim: ...

_AbstractDimOrVariadicDim = Union[
    _AnonymousDim,
    _AnonymousVariadicDim,
    _NamedDim,
    _NamedVariadicDim,
    _FixedDim,
    _SymbolicDim,
]
_AbstractDim = Union[_AnonymousDim, _NamedDim, _FixedDim, _SymbolicDim]


_ArrayType = TypeVar("_ArrayType")
_Shape = TypeVar("_Shape", bound=str)
Self = TypeVar("Self", bound="AbstractArray[_ArrayType, _Shape]")
class AbstractArray(Generic[_ArrayType, _Shape]):
    def __add__(self: Self, other: Self) -> Self: ...
    def __radd__(self: Self, other: Self) -> Self: ...
    def __iadd__(self: Self, other: Self) -> Self: ...
    def __sub__(self: Self, other: Self) -> Self: ...
    def __rsub__(self: Self, other: Self) -> Self: ...
    def __isub__(self: Self, other: Self) -> Self: ...
    def __mul__(self: Self, other: Self) -> Self: ...
    def __rmul__(self: Self, other: Self) -> Self: ...
    def __imul__(self: Self, other: Self) -> Self: ...
    # def __matmul__(self: Self, other: Self) -> Self: ...
    def __pow__(self: Self, other: Self) -> Self: ...
    def __ipow__(self: Self, other: Self) -> Self: ...
    def __sub__(self: Self, other: Self) -> Self: ...
    def __rsub__(self: Self, other: Self) -> Self: ...
    def __isub__(self: Self, other: Self) -> Self: ...
    def __mul__(self: Self, other: Self) -> Self: ...
    def __rmul__(self: Self, other: Self) -> Self: ...
    def __imul__(self: Self, other: Self) -> Self: ...
    def __matmul__(self: Self, other: Self) -> Self: ...
    def __pow__(self: Self, other: Self) -> Self: ...
    def __ipow__(self: Self, other: Self) -> Self: ...
    def __div__(self: Self, other: Self) -> Self: ...
    def __truediv__(self: Self, other: Self) -> Self: ...
    def __rdiv__(self: Self, other: Self) -> Self: ...
    def __rtruediv__(self: Self, other: Self) -> Self: ...
    def __idiv__(self: Self, other: Self) -> Self: ...
    def __mod__(self: Self, other: Self) -> Self: ...
    def __neg__(self: Self) -> Self: ...
    def __eq__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...
    def __ne__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...
    def __lt__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...
    def __le__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...
    def __gt__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...
    def __ge__(self, other: Self) -> "Bool[_ArrayType, _Shape]": ...

class UInt2(AbstractArray[_ArrayType, _Shape]): ...
class UInt4(AbstractArray[_ArrayType, _Shape]): ...
class UInt8(AbstractArray[_ArrayType, _Shape]):
    def __and__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __or__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __xor__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __iadd__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __ior__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __ixor__(self, other: "UInt8[_ArrayType, _Shape]") -> "UInt8[_ArrayType, _Shape]": ...
    def __invert__(self) -> "UInt8[_ArrayType, _Shape]": ...

class UInt16(AbstractArray[_ArrayType, _Shape]): ...
class UInt32(AbstractArray[_ArrayType, _Shape]): ...
class UInt64(AbstractArray[_ArrayType, _Shape]): ...
class Int2(AbstractArray[_ArrayType, _Shape]): ...
class Int4(AbstractArray[_ArrayType, _Shape]): ...
class Int8(AbstractArray[_ArrayType, _Shape]): ...
class Int16(AbstractArray[_ArrayType, _Shape]): ...
class Int32(AbstractArray[_ArrayType, _Shape]): ...
class Int64(AbstractArray[_ArrayType, _Shape]): ...
class Float8e4m3b11fnuz(AbstractArray[_ArrayType, _Shape]): ...
class Float8e4m3fn(AbstractArray[_ArrayType, _Shape]): ...
class Float8e4m3fnuz(AbstractArray[_ArrayType, _Shape]): ...
class Float8e5m2(AbstractArray[_ArrayType, _Shape]): ...
class Float8e5m2fnuz(AbstractArray[_ArrayType, _Shape]): ...
class BFloat16(AbstractArray[_ArrayType, _Shape]): ...
class Float16(AbstractArray[_ArrayType, _Shape]): ...
class Float32(AbstractArray[_ArrayType, _Shape]): ...
class Float64(AbstractArray[_ArrayType, _Shape]): ...
class Complex64(AbstractArray[_ArrayType, _Shape]): ...
class Complex128(AbstractArray[_ArrayType, _Shape]): ...
class Bool(AbstractArray[_ArrayType, _Shape]): ...

# UInt = Union[UInt2[_ArrayType, _Shape], UInt4[_ArrayType, _Shape], UInt8[_ArrayType, _Shape], UInt16[_ArrayType, _Shape], UInt32[_ArrayType, _Shape], UInt64[_ArrayType, _Shape]]
# Int = Union[Int2[_ArrayType, _Shape], Int4[_ArrayType, _Shape], Int8[_ArrayType, _Shape], Int16[_ArrayType, _Shape], Int32[_ArrayType, _Shape], Int64[_ArrayType, _Shape]]
# Integer = Union[Int[_ArrayType, _Shape], UInt[_ArrayType, _Shape]]
# Float = Union[Float8e4m3b11fnuz[_ArrayType, _Shape], Float8e4m3fn[_ArrayType, _Shape], Float8e4m3fnuz[_ArrayType, _Shape], Float8e5m2[_ArrayType, _Shape], Float8e5m2fnuz[_ArrayType, _Shape], BFloat16[_ArrayType, _Shape], Float16[_ArrayType, _Shape], Float32[_ArrayType, _Shape], Float64[_ArrayType, _Shape]]
# Complex = Union[Complex64[_ArrayType, _Shape], Complex128[_ArrayType, _Shape]]
# Inexact = Union[Float[_ArrayType, _Shape], Complex[_ArrayType, _Shape]]
# Real = Union[Float[_ArrayType, _Shape], UInt[_ArrayType, _Shape], Int[_ArrayType, _Shape]]
# Num = Union[Float[_ArrayType, _Shape], Complex[_ArrayType, _Shape], UInt[_ArrayType, _Shape], Int[_ArrayType, _Shape]]

# Note: not supported
# class Shaped(Generic[_ArrayType, _Shape]): ...
# class Key(Generic[_ArrayType, _Shape]): ...


def make_numpy_struct_dtype(dtype: "np.dtype", name: str): ...
