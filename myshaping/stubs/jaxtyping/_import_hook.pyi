import ast
from _typeshed import Incomplete
from collections.abc import Sequence
from importlib.abc import MetaPathFinder
from importlib.machinery import SourceFileLoader

class Typechecker:
    lookup: Incomplete
    hash: Incomplete
    def __init__(self, typechecker) -> None: ...
    def get_hash(self): ...
    def get_ast(self): ...

class JaxtypingTransformer(ast.NodeVisitor):
    def __init__(self, *, typechecker: Typechecker) -> None: ...
    def visit_Module(self, node: ast.Module): ...
    def visit_ClassDef(self, node: ast.ClassDef): ...
    def visit_FunctionDef(self, node: ast.FunctionDef): ...

class _JaxtypingLoader(SourceFileLoader):
    def __init__(self, *args, typechecker: Typechecker, **kwargs) -> None: ...
    def source_to_code(self, data, path, *, _optimize: int = -1): ...
    def exec_module(self, module): ...

class _JaxtypingFinder(MetaPathFinder):
    modules: Incomplete
    def __init__(self, modules, original_pathfinder, typechecker: Typechecker) -> None: ...
    def find_spec(self, fullname, path: Incomplete | None = None, target: Incomplete | None = None): ...
    def should_instrument(self, module_name: str) -> bool: ...

class ImportHookManager:
    hook: Incomplete
    def __init__(self, hook: MetaPathFinder) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
    def uninstall(self) -> None: ...

def install_import_hook(modules: str | Sequence[str], typechecker: str | None): ...
